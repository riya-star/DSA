*****************************************************************************************************************************************************************************
Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
*****************************************************************************************************************************************************************************
class Solution {
public:
    void setmatrixZero(vector<vector<int>>& a, int r,int c, int n1,int n2)
    {
        for(int q=0;q<n2;q++)
        {
            a[r][q]=0;
        }
         for(int q=0;q<n1;q++)
        {
            a[q][c]=0;
        }
    }
    void setZeroes(vector<vector<int>>& matrix) {
        vector<int> v;
        int m= matrix.size();
        int n=matrix[0].size();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
               if(matrix[i][j]==0)
               {
                   v.push_back(i);
                   v.push_back(j);
               }
            }
        }
        for(int i=0;i<v.size();i+=2)
        {
            setmatrixZero(matrix,v[i],v[i+1],m,n);
        }
    }
};
