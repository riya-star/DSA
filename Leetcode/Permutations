************************************************************************************************************************************************
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
**************************************************************************************************************************************************
class Solution {
public:
    void permu(vector<vector<int>>& res, vector<int> nums, int l, int h)
    {
        if(l==h)
        {
            return res.push_back(nums);
            
        }
        else
        {
            for(int i=l;i<=h;i++)
            {
                swap(nums[l],nums[i]);
                permu(res,nums,l+1,h);
                swap(nums[l],nums[i]);
            }
        }
    }
    
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        int n=nums.size();
        int l=0,h=n-1;
        permu(res,nums,l,h);
        return res;
        
    }
    
};
