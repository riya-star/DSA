****************************************************************************************************************************************************************************
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
 

Constraints:

-10^9 <= nums1[i], nums2[i] <= 10^9
nums1.length == m + n
nums2.length == n
*****************************************************************************************************************************************************************************
class Solution {
public:
    void insertionSort(vector<int>& arr)
    {
        int n= arr.size();
        for(int i=1;i<n;i++)
        {
            if(arr[i]<arr[i-1])
            {
                int k=arr[i];
                int j=i-1;
                while(j>=0&&arr[i]<arr[j])
                {
                    arr[j+1]=arr[j];
                    j=j-1;
                }
                arr[j+1]=k;
            }
        }
    }
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
      int i=0,j=0;
        while(i<m&&j<n)
        {
            if(nums1[i]>nums2[j])
            {
                swap(nums1[i],nums2[j]);
                insertionSort(nums2);
                i++;
            }
            else
            {
                i++;
            }
            
        }
        while(j<n){nums1[i++]=nums2[j++];}
    }
};
